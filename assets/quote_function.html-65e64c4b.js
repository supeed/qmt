import{_ as d,r as l,o as c,c as r,d as p,w as s,e as n,a as i,b as t}from"./app-4f7ad5aa.js";const F={},y=i(`<h2 id="ext-data-获取扩展数据" tabindex="-1"><a class="header-anchor" href="#ext-data-获取扩展数据" aria-hidden="true">#</a> ext_data - 获取扩展数据</h2><p>获取扩展数据</p><p><strong>调用方法：</strong><code>ext_data(extdataname, stockcode, deviation, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>extdataname</code></td><td><code>string</code></td><td>扩展数据名</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>deviation</code></td><td><code>number</code></td><td>K 线偏移</td><td>0：不偏移，N：向右偏移N，-N：向左偏移N</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python 对象</td><td>ython 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>返回：</strong> number</p><p>** 示例：**</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(ext_data(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">CR</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ext-data-rank-获取引用的扩展数据的数值在所有品种中的排名" tabindex="-1"><a class="header-anchor" href="#ext-data-rank-获取引用的扩展数据的数值在所有品种中的排名" aria-hidden="true">#</a> ext_data_rank - 获取引用的扩展数据的数值在所有品种中的排名</h2><p>获取引用的扩展数据的数值在所有品种中的排名</p><p><strong>调用方法：</strong><code>ext_data_rank(extdataname, stockcode, deviation, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>extdataname</code></td><td><code>string</code></td><td>扩展数据名</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>deviation</code></td><td><code>number</code></td><td>K 线偏移</td><td>0：不偏移，N：向右偏移N，-N：向左偏移N</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python 对象</td><td>ython 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>返回：</strong> number</p><p>** 示例：**</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(ext_data_rank(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">mycci</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ext-data-rank-range-获取引用的扩展数据的数值在指定时间区间内所有品种中的排名" tabindex="-1"><a class="header-anchor" href="#ext-data-rank-range-获取引用的扩展数据的数值在指定时间区间内所有品种中的排名" aria-hidden="true">#</a> ext_data_rank_range - 获取引用的扩展数据的数值在指定时间区间内所有品种中的排名</h2><p>获取引用的扩展数据的数值在指定时间区间内所有品种中的排名</p><p>** 调用方法： **<code>ext_data_rank_range(extdataname, stockcode, begintime, endtime, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>extdataname</code></td><td><code>string</code></td><td>扩展数据名</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>begintime</code></td><td><code>string</code></td><td>区间的起始时间</td><td>格式为 &#39;2016-08-02 12:12:30&#39;（包括该时间点在内）</td></tr><tr><td><code>endtime</code></td><td><code>string</code></td><td>区间的结束时间</td><td>格式为 &#39;2017-08-02 12:12:30&#39; （包括该时间点在内）</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python对象</td><td>Python 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>返回：</strong> pythonDict</p><p>** 示例：**</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(ext_data_rank_range(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">mycci</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2022-08-02 12:12:30</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2023-08-02 12:12:30</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ext-data-range-获取扩展数据在指定时间区间内的值" tabindex="-1"><a class="header-anchor" href="#ext-data-range-获取扩展数据在指定时间区间内的值" aria-hidden="true">#</a> ext_data_range - 获取扩展数据在指定时间区间内的值</h2><p>获取扩展数据在指定时间区间内的值</p><p><strong>调用方法：</strong><code>ext_data_range(extdataname, stockcode, begintime, endtime, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>extdataname</code></td><td><code>string</code></td><td>扩展数据名</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>begintime</code></td><td><code>string</code></td><td>区间的起始时间</td><td>格式为 &#39;2016-08-02 12:12:30&#39;（包括该时间点在内）</td></tr><tr><td><code>endtime</code></td><td><code>string</code></td><td>区间的结束时间</td><td>格式为 &#39;2017-08-02 12:12:30&#39; （包括该时间点在内）</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python对象</td><td>Python 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>返回：</strong> pythonDict</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(ext_data_range(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">mycci</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2022-08-02 12:12:30</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2023-08-02 12:12:30</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-factor-value-获取因子数据" tabindex="-1"><a class="header-anchor" href="#get-factor-value-获取因子数据" aria-hidden="true">#</a> get_factor_value - 获取因子数据</h2><p>获取因子数据</p><p><strong>调用方法：</strong><code>get_factor_value(factorname, stockcode, deviation, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>factorname</code></td><td><code>string</code></td><td>因子名称</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>deviation</code></td><td><code>number</code></td><td>K 线偏移</td><td>0 不偏移，N 向右偏移 N，-N 向左偏移 N</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python对象</td><td>Python 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>返回：</strong> number</p><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(get_factor_value(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zzz</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-factor-rank-获取引用的因子数据的数值在所有品种中排名" tabindex="-1"><a class="header-anchor" href="#get-factor-rank-获取引用的因子数据的数值在所有品种中排名" aria-hidden="true">#</a> get_factor_rank - 获取引用的因子数据的数值在所有品种中排名</h2><p>获取引用的因子数据的数值在所有品种中排名</p><p><strong>调用方法：</strong><code>get_factor_rank(factorname, stockcode, deviation, ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>factorname</code></td><td><code>string</code></td><td>因子名称</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>deviation</code></td><td><code>number</code></td><td>K 线偏移</td><td>0 不偏移，N 向右偏移 N，-N 向左偏移 N</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python对象</td><td>Python 对象，这里必须是 ContextInfo</td></tr></tbody></table><p><strong>示例：</strong></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="shiki dracula" style="background-color:#282A36;" tabindex="0"><code><span class="line"><span style="color:#6272A4;">#coding:gbk</span></span>
<span class="line"><span style="color:#FF79C6;">def</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">init</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ContextInfo</span><span style="color:#F8F8F2;">):</span></span>
<span class="line"><span style="color:#F8F8F2;">	</span><span style="color:#8BE9FD;">print</span><span style="color:#F8F8F2;">(get_factor_rank(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zzz</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">600000.SH</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, ContextInfo))</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="call-vba-获取引用的-vba-模型运行的结果" tabindex="-1"><a class="header-anchor" href="#call-vba-获取引用的-vba-模型运行的结果" aria-hidden="true">#</a> call_vba - 获取引用的 VBA 模型运行的结果</h2><p>获取引用的 VBA 模型运行的结果</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>注意</p><ol><li>使用该函数时需补充好本地 K 线或分笔数据</li></ol></div><p><strong>调用方法：</strong> <code>call_vba(factorname, stockcode,[period, dividend_type, barpos],ContextInfo)</code></p><p><strong>参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>说明</th><th>提示</th></tr></thead><tbody><tr><td><code>factorname</code></td><td><code>string</code></td><td>因子名称</td><td></td></tr><tr><td><code>stockcode</code></td><td><code>string</code></td><td>证券代码</td><td>形式如 &#39;600000.SH&#39;</td></tr><tr><td><code>period</code></td><td><code>string</code></td><td>K 线偏移</td><td>可缺省，默认为当前主图周期线型</td></tr><tr><td><code>dividend_type</code></td><td><code>string</code></td><td>复权方式</td><td>可缺省，默认当前图复权方式，具体可选值如下</td></tr><tr><td><code>barpos</code></td><td><code>number</code></td><td>对应 bar 下标</td><td>可缺省，默认当前主图调用到的 bar 的对应下标xtInfo</td></tr><tr><td><code>ContextInfo</code></td><td><code>pythonObj</code></td><td>Python 对象</td><td>Python 对象，这里必须是 ContextInfo</td></tr></tbody></table><ul><li><p>period 可选值：</p><blockquote><p>&#39;tick&#39;：分笔线 &#39;1d&#39;：日线 &#39;1m&#39;：1分钟线 &#39;3m&#39;：3分钟线 &#39;5m&#39;：5分钟线 &#39;15m&#39;：15分钟线 &#39;30m&#39;：30分钟线 &#39;1h&#39;：小时线 &#39;1w&#39;：周线 &#39;1mon&#39;：月线 &#39;1q&#39;：季线 &#39;1hy&#39;：半年线 &#39;1y&#39;：年线</p></blockquote></li><li><p>dividend_type 可选值：</p><blockquote><p>&#39;none&#39;：不复权 &#39;front&#39;：向前复权 &#39;back&#39;：向后复权 &#39;front_ratio&#39;：等比向前复权 &#39;back_ratio&#39;：等比向后复权</p></blockquote></li></ul><p><strong>返回：</strong> number</p><p><strong>示例：</strong></p>`,56),h=t("div",{class:"language-python line-numbers-mode","data-ext":"py"},[t("pre",{class:"shiki dracula",style:{"background-color":"#282A36"},tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#6272A4"}},"#coding:gbk")]),n(`
`),t("span",{class:"line"},[t("span",{style:{color:"#FF79C6"}},"def"),t("span",{style:{color:"#F8F8F2"}}," "),t("span",{style:{color:"#50FA7B"}},"init"),t("span",{style:{color:"#F8F8F2"}},"("),t("span",{style:{color:"#FFB86C","font-style":"italic"}},"ContextInfo"),t("span",{style:{color:"#F8F8F2"}},"):")]),n(`
`),t("span",{class:"line"},[t("span",{style:{color:"#F8F8F2"}},"	"),t("span",{style:{color:"#8BE9FD"}},"print"),t("span",{style:{color:"#F8F8F2"}},"(call_vba("),t("span",{style:{color:"#E9F284"}},"'"),t("span",{style:{color:"#F1FA8C"}},"MA.ma1"),t("span",{style:{color:"#E9F284"}},"'"),t("span",{style:{color:"#F8F8F2"}},", "),t("span",{style:{color:"#E9F284"}},"'"),t("span",{style:{color:"#F1FA8C"}},"600036.SH"),t("span",{style:{color:"#E9F284"}},"'"),t("span",{style:{color:"#F8F8F2"}},", ContextInfo))")]),n(`
`),t("span",{class:"line"})])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"}),t("div",{class:"line-number"}),t("div",{class:"line-number"})])],-1),b=t("p",null,"@ tab 返回值",-1),g=t("div",{class:"language-text line-numbers-mode","data-ext":"text"},[t("pre",{class:"shiki dracula",style:{"background-color":"#282A36"},tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{color:"#F8F8F2"}},"-1.0")]),n(`
`),t("span",{class:"line"},[t("span",{style:{color:"#F8F8F2"}})])])]),t("div",{class:"line-numbers","aria-hidden":"true"},[t("div",{class:"line-number"})])],-1);function u(v,m){const o=l("Tabs");return c(),r("div",null,[y,p(o,{id:"751",data:[{id:"python"}]},{title0:s(({value:e,isActive:a})=>[n("python")]),tab0:s(({value:e,isActive:a})=>[h,b,g]),_:1})])}const f=d(F,[["render",u],["__file","quote_function.html.vue"]]);export{f as default};
